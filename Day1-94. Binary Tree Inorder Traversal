/*Given the root of a binary tree, return the inorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]
 
Constraints:
The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100}
*/

C++ Solution:

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> li;
        Inorder_trav(root,li);
        return li;
    }


    void Inorder_trav(TreeNode* temp,vector<int>& li){
        if(temp==nullptr)
        return;

        Inorder_trav(temp->left,li);
        li.push_back(temp->val);
        Inorder_trav(temp->right,li);
    }
};

Java Solution:

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> li=new ArrayList<>();
        Inorder_trav(root,li);
        return li;
      
    }
     public void Inorder_trav(TreeNode temp,List<Integer> li)
    {
        if(temp==null)
            return;
        Inorder_trav(temp.left,li);
        li.add(temp.val);
        Inorder_trav(temp.right,li);
    }
}
