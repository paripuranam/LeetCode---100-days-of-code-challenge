Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

Example 1:
Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6

Example 2:
Input: arr = [1,1]
Output: 1
 
Constraints:
1 <= arr.length <= 104
0 <= arr[i] <= 105

Java Solution:

class Solution {
    public int findSpecialInteger(int[] arr) {
        int n = arr.length;
        int per = n / 4;
        int cnt = 1;
        int ans = arr[0];
        for (int i = 1 ; i < n ; i++) {

            if ( ans == arr[i]) cnt++;
            else cnt = 1;
            
            if (cnt > per) return arr[i];
            
            ans = arr[i];
        }

        return ans;
    }
}

C++ Solution:

class Solution {
public:
    int findSpecialInteger(vector<int>& arr) {
        int n = arr.size();
        int per = n / 4;
        int cnt = 1;
        int ans = arr[0];
        for (int i = 1 ; i < n ; i++) {

            if ( ans == arr[i]) cnt++;
            else cnt = 1;
            
            if (cnt > per) return arr[i];
            
            ans = arr[i];
        }

        return ans;
    }
};
