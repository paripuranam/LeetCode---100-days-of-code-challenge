Problem Link : https://leetcode.com/problems/validate-binary-search-tree/description/


Java Solution:
class Solution {
    public boolean isValidBST(TreeNode root) {
        if (root == null) return true;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode pre = null;
        while (root != null || !stack.isEmpty()) {
           while (root != null) {
              stack.push(root);
              root = root.left;
           }
           root = stack.pop();
           if(pre != null && root.val <= pre.val) return false;
           pre = root;
           root = root.right;
        }
        return true;
    }
}


C++ Solution:
class Solution {
public:
    bool isValidBST(TreeNode* root) {
         if (root == nullptr) return true;
        stack<TreeNode*> st;
        TreeNode* pre = nullptr;
        while (root != nullptr || !st.empty()) {
            while (root != nullptr) {
                st.push(root);
                root = root->left;
            }
            root = st.top();
            st.pop();
            if (pre != nullptr && root->val <= pre->val) return false;
            pre = root;
            root = root->right;
        }
        return true;
    }
};
