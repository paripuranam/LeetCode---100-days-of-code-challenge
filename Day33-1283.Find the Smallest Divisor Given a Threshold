Problem Link : https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/description/


Java Solution:
class Solution {
    public int smallestDivisor(int[] nums, int threshold) {
        if(nums.length>threshold) return -1;

        int low = 1;
        int high = Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++) high = Math.max(high,nums[i]);
        
        while(low<=high){
            int mid = (low+high)/2;
            if(check(nums,mid) <= threshold) {
                high = mid-1;
            }
            else {
                low = mid + 1;
            }
        }
        return low;
    }

    int check(int[] nums,int mid){
        int sum=0;
        for(int i=0;i<nums.length;i++){
            sum+=Math.ceil((double)nums[i]/(double)mid);
        }
        return sum;
    }
}



C++ Solution:
class Solution {
public:
    int smallestDivisor(vector<int>& nums, int threshold) {

        if(nums.size()>threshold) return -1;

        int low = 1;
        int high = *max_element(nums.begin(),nums.end());
        
        while(low<=high){
            int mid = (low+high)/2;
            if(check(nums,mid) <= threshold) {
                high = mid-1;
            }
            else {
                low = mid + 1;
            }
        }
        return low;
    }

    int check(vector<int>& nums,int mid){
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=ceil((double)nums[i]/(double)mid);
        }
        return sum;
    }
};