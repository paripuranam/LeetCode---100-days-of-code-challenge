Problem Link : https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/


Java Soution:
class Solution {
   public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
       if ((root.val > p.val) && (root.val > q.val))
        {
            return lowestCommonAncestor(root.left, p, q);
        }
        if ((root.val < p.val) && (root.val < q.val))
        {
            return lowestCommonAncestor(root.right, p, q);
        }
        return root;
   }
}


C++ Solution:
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if ((root -> val > p-> val) && (root -> val > q -> val))
        {
            return lowestCommonAncestor(root->left, p, q);
        }
        if ((root->val < p->val) && (root->val < q->val))
        {
            return lowestCommonAncestor(root->right, p, q);
        }
        return root;
    }
};
