Problem Link : https://leetcode.com/problems/maximum-average-subarray-i/description/


Java Solution:
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int n = nums.length;
        if (n == 1) {
            return (double)(nums[0]) / k;
        }

        long sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }

        double maxi = (double)(sum) / k;

        for (int i = k; i < n; i++) {
            sum += nums[i] - nums[i - k];
            double avg = (double)(sum) / k;
            if (maxi < avg) {
                maxi = avg;
            }
        }

        return maxi;
    }
}



C++ Solution:
class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        int n = nums.size();
        if (n == 1) {
            return double(nums[0]) / k;
        }

        long sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }

        double maxi = double(sum) / k;

        for (int i = k; i < n; i++) {
            sum += nums[i] - nums[i - k];
            double avg = double(sum) / k;
            if (maxi < avg) {
                maxi = avg;
            }
        }

        return maxi;
    }
};
