Problem Link : https://leetcode.com/problems/maximum-product-difference-between-two-pairs/description/?envType=daily-question&envId=2023-12-18


Java Solution 1st:
class Solution {
    public int maxProductDifference(int[] nums) {
         int n=nums.length;
        Arrays.sort(nums);
        int diff=Math.abs((nums[0]*nums[1])-(nums[n-2]*nums[n-1]));
        return diff;
    }
}
Java Soution 2nd:
class Solution {
    public int maxProductDifference(int[] nums) {
        int max1 = 0;
        int max2 = 0;
        int min1 = Integer.MAX_VALUE;
        int min2 = Integer.MAX_VALUE;
        for (int num : nums) {
            if (num < min1) {
                min2 = min1;
                min1 = num;
            } else if (num < min2) {
                min2 = num;
            }

            if (num > max1) {
                max2 = max1;
                max1 = num;
            } else if (num > max2) {
                max2 = num;
            }
        }

        return (max1 * max2 - min1 * min2);
    }
}



C++ Solution 1st:
class Solution {
public:
    int maxProductDifference(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        int diff=abs((nums[0]*nums[1])-(nums[n-2]*nums[n-1]));
        return diff;
        
    }
};

C++ Solution 2nd:
class Solution {
public:
    int maxProductDifference(vector<int>& nums) {
        int max1 = 0;
        int max2 = 0;
        int min1 = INT_MAX;
        int min2 = INT_MAX;
        for (auto num : nums) {
            if (num < min1) {
                min2 = min1;
                min1 = num;
            } else if (num < min2) {
                min2 = num;
            }

            if (num > max1) {
                max2 = max1;
                max1 = num;
            } else if (num > max2) {
                max2 = num;
            }
        }

        return (max1 * max2 - min1 * min2);
        
    }
};
