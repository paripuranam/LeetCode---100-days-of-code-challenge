Problem Link : https://leetcode.com/problems/implement-queue-using-stacks/description/

Java Solution:
class MyQueue {
	private Deque<Integer> in_queue = new ArrayDeque<>();
    private Deque<Integer> out_queue =  new ArrayDeque<>();
    public void push(int x) {
        in_queue.push(x);
    }
    public int pop() {
        peek();
        return out_queue.pop();
    }
    public int peek() {
        if (out_queue.isEmpty())
        while (!in_queue.isEmpty())
            out_queue.push(in_queue.pop());
        return out_queue.peek();
    }
    public boolean empty() {
        return in_queue.isEmpty() && out_queue.isEmpty();
    }
}


C++ Solution:
class MyQueue {
    stack<int>input;
    stack<int>output;
public:
    MyQueue() {
        
    }
    
    void push(int x) {
        input.push(x);
    }
    
    int pop() {

        if(output.empty() == false){
            int x = output.top();
            output.pop();
            return x;
        }

        while(!input.empty())
        {
            int x = input.top();
            input.pop();
            output.push(x);
        }
        int x = output.top();
        output.pop();
        return x;
    }
    
    int peek() {
        if(output.empty())
        {
           while(!input.empty()){
               output.push(input.top());
               input.pop();
           } 
        }
        return output.top();  
    }
    bool empty() {

        if(output.empty() && input.empty())
        return 1;

        return 0;
        
    }
};
