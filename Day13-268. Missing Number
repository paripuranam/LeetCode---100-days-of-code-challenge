Problem Link : https://leetcode.com/problems/missing-number/description/

Java Solution 1:  TC -> O(nlogn)   SC -> O(1)
class Solution {
    public int missingNumber(int[] nums) {
       Arrays.sort(nums);
        int i=0;
        while(i<nums[nums.length-1]){
             if(i!=nums[i]){
                return i;
            }
            i++;
        }
        return i+1;
    }
}

Java Solution 2:    TC -> O(n)   SC -> O(1)

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int sum1 = n * (n + 1) / 2;
        int sum2 = Arrays.stream(nums).sum(); 
        return sum1 - sum2;
    }
}



C++ Solution 1:   TC -> O(n)   SC -> O(1)
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int i=0;
        while(i<nums[nums.size()-1]){
             if(i!=nums[i]){
                return i;
            }
            i++;
        }
        return i+1;
    }
};

C++ Solution 2:   TC -> O(nlogn)   SC -> O(1)

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        int sum1 = n * (n + 1) / 2;
        int sum2 = accumulate(nums.begin(), nums.end(), 0);  // O(n) time complexity

        return sum1 - sum2;
    }
};

