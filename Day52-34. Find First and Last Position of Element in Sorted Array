Problem Link : https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/ 

Java Solution :

class Solution {
    public int[] searchRange(int[] nums, int target) {
         int n= nums.length;
        int low = 0;
        int high = n-1;
        int first=firstPosition(nums, low, high, target);
        if(first==-1) return new int[]{-1,-1};
        int last = LastPosition( nums, low, high, target);

        return new int[]{first,last};
    }

    int firstPosition(int[] nums,int low,int high,int target){
        int ans = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]==target){
                ans = mid;
                high =mid - 1;
            }
            else if(nums[mid]<target) low = mid + 1;
            else high = mid-1;
        }
        return ans;
    }
    int LastPosition(int[] nums,int low,int high,int target){
        int ans = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]==target){
                ans = mid;
                low =mid + 1;
            }
            else if(nums[mid]<target) low = mid + 1;
            else high = mid-1;
        }
        return ans;
    }
}




C++ Solution:

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n= nums.size();
        int low = 0;
        int high = n-1;
        int first=firstPosition(nums, low, high, target);
        if(first==-1) return {-1,-1};
        int last = LastPosition( nums, low, high, target);

        return {first,last};
    }

    int firstPosition(vector<int>& nums,int low,int high,int target){
        int ans = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]==target){
                ans = mid;
                high =mid - 1;
            }
            else if(nums[mid]<target) low = mid + 1;
            else high = mid-1;
        }
        return ans;
    }
    int LastPosition(vector<int>& nums,int low,int high,int target){
        int ans = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]==target){
                ans = mid;
                low =mid + 1;
            }
            else if(nums[mid]<target) low = mid + 1;
            else high = mid-1;
        }
        return ans;
    }
};
