Problem Link : https://leetcode.com/problems/longest-increasing-subsequence/description/?envType=daily-question&envId=2024-01-05

Java Solution:
import java.util.ArrayList;
import java.util.List;

public class Solution {
    public int lengthOfLIS(int[] nums) {
        List<Integer> temp = new ArrayList<>();
        temp.add(nums[0]);
        int ans = 1;

        for (int i = 1; i < nums.length; i++) {
            if (temp.get(temp.size() - 1) < nums[i]) {
                temp.add(nums[i]);
                ans++;
            } else {
                int index = binarySearch(temp, nums[i]);
                temp.set(index, nums[i]);
            }
        }
        return ans;
    }

    private int binarySearch(List<Integer> temp, int target) {
        int left = 0;
        int right = temp.size() - 1;

        while (left < right) {
            int mid =(right + left) / 2;
            if (temp.get(mid) < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
}




C++ Solution:
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> temp;
        temp.push_back(nums[0]);
        int ans = 1; 
        for(int i=1;i<nums.size();i++){
            if(temp.back() < nums[i]){
                temp.push_back(nums[i]);
                ans++;
            }
            else{ 
                int index = lower_bound(temp.begin(),temp.end(),nums[i]) - temp.begin(); 
                temp[index] = nums[i];
            }
        }
        return ans;
    }
};
