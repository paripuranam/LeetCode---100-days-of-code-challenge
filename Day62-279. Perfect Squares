Problem Link : https://leetcode.com/problems/perfect-squares/description/?envType=daily-question&envId=2024-02-08


Java Solution:
class Solution {
    public int numSquares(int n) {
        if (n <= 0) {
            return 0;
        }
        
        int[] cntPerfectSquares = new int[n + 1];
        Arrays.fill(cntPerfectSquares, Integer.MAX_VALUE);
        cntPerfectSquares[0] = 0;
        
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j * j <= i; j++) {
                cntPerfectSquares[i] = 
                    Math.min(cntPerfectSquares[i], cntPerfectSquares[i - j * j] + 1);
            }
        }
        
        return cntPerfectSquares[n];
    }
}



C++ Solution:
class Solution {
public:
    int numSquares(int n) 
    {
        if (n <= 0)
        {
            return 0;
        }
        
        vector<int> cntPerfectSquares(n + 1, INT_MAX);
        cntPerfectSquares[0] = 0;
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j*j <= i; j++)
            {
                cntPerfectSquares[i] = 
                    min(cntPerfectSquares[i], cntPerfectSquares[i - j*j] + 1);
            }
        }
        
        return cntPerfectSquares.back();
    }
};
