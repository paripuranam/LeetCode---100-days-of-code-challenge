Problem Link : https://leetcode.com/problems/count-elements-with-maximum-frequency/description/?envType=daily-question&envId=2024-03-08


Java Solution:
import java.util.Hashtable;
class Solution {
    public int maxFrequencyElements(int[] nums) {
        int n = nums.length;
        Hashtable<Integer, Integer> mp = new Hashtable<>();

        for(int i = 0;i<n;i++){
            if(mp.containsKey(nums[i])){
                mp.put(nums[i], mp.get(nums[i])+1);
            }
            else{
                mp.put(nums[i],1);
            }
        }

        int max = Integer.MIN_VALUE;
        for(int i:mp.values()){
            max=Math.max(max,i);
        }
        int ans=0;
        
        for(int i:mp.values()){
            if(i==max) ans+=i;
        }
        return ans;
    }
}


C++ Solution:
class Solution {
public:
    int maxFrequencyElements(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int,int> mp;
        for(int i = 0;i<n;i++){
            if(mp.find(nums[i])!=mp.end()) mp[nums[i]]++;
            else mp[nums[i]]=1;
        }
        int ans = 0;
        int max = 0;
        for(auto i : mp){
            if(max<i.second) max = i.second;
        }

        for(auto i : mp){
            if(max==i.second) ans+=max;
        }
        return ans;
    }
};
