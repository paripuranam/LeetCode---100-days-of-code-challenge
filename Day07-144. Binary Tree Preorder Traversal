Problem Link : https://leetcode.com/problems/binary-tree-preorder-traversal/description/

Given the root of a binary tree, return the preorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]
 
Constraints:
The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

Java Solution:

class Solution {
    void preorder(TreeNode root,List<Integer> ans){
        if(root==null)
        return ;
        ans.add(root.val);
        preorder(root.left,ans);
        preorder(root.right,ans);
        
    }
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        preorder(root,ans);
        return ans;
    }
}

C++ Solution:

class Solution {
    void preorder(TreeNode*&root,vector<int>& ans){
        if(root){
        ans.push_back(root->val);
        preorder(root->left,ans);
        preorder(root->right,ans);
        }
    }

public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        preorder(root,ans);

        return ans;
    }
};
