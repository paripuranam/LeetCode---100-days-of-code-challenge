Problem Link : https://leetcode.com/problems/evaluate-reverse-polish-notation/description/

Java Solution :

class Solution {
    public int evalRPN(String[] tokens) {
        Stack<String> stack = new Stack<>();
        String x = "-1";
        for(int i=0; i < tokens.length; i++){
            if(tokens[i].equals("+"))
                x = Integer.toString(Integer.parseInt(stack.pop()) + Integer.parseInt(stack.pop()));
            else if(tokens[i].equals("-")){
                String y = stack.pop();
                x = Integer.toString(Integer.parseInt(stack.pop()) - Integer.parseInt(y)); 
            }
            else if(tokens[i].equals("*"))
                x = Integer.toString(Integer.parseInt(stack.pop()) * Integer.parseInt(stack.pop()));
            else if(tokens[i].equals("/")){
                String y = stack.pop();
                x = Integer.toString(Integer.parseInt(stack.pop()) / Integer.parseInt(y)); 
            }   
            else
                x = tokens[i];

            stack.push(x);
        }
        return Integer.parseInt(x);
    }
}



C++ Solution :

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> st;
        long op1, op2;
        unordered_set<string> op = {"+", "-", "/", "*"};
        for (auto i : tokens) {
            if (op.find(i) == op.end()) {
                st.push(stoi(i));
            } else {
                op2 = st.top();
                st.pop();
                op1 = st.top();
                st.pop();

                if (i == "+") {
                    op1 = op1 + op2;
                } else if (i == "-") {
                    op1 = op1 - op2;
                } else if (i == "/") {
                    if (op2 == 0) {
                        return INT_MAX;
                    }
                    op1 = op1 / op2;
                } else if (i == "*") {
                    op1 = op1 * op2;
                }
                st.push(op1);
            }
        }
        return st.top();
    }
};
