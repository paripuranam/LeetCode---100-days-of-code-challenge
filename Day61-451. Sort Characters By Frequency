Problem Link : https://leetcode.com/problems/sort-characters-by-frequency/description/?envType=daily-question&envId=2024-02-07


Java Solution:
class Solution {
    public String frequencySort(String s) {
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray())
            map.put(c, map.getOrDefault(c, 0) + 1);
						
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());
        pq.addAll(map.entrySet());
				
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
            Map.Entry e = pq.poll();
            for (int i = 0; i < (int)e.getValue(); i++) 
                sb.append(e.getKey());
        }
        return sb.toString();
    }
}


C++ Solution:
class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> map;
        for (char c : s)
            map[c]++;
        
        auto cmp = [](pair<char, int>& a, pair<char, int>& b) {
            return a.second < b.second;
        };
        priority_queue<pair<char, int>, vector<pair<char, int>>, decltype(cmp)> pq(cmp);
        
        for (auto& entry : map)
            pq.push(entry);
        
        string result;
        while (!pq.empty()) {
            auto e = pq.top();
            pq.pop();
            for (int i = 0; i < e.second; i++)
                result += e.first;
        }
        return result;
    }
};

