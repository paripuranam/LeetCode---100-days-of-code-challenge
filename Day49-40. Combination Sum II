Problem Link : https://leetcode.com/problems/combination-sum-ii/description/


Java Solution:
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        findCombination(0,target,candidates,ans,new ArrayList<>());
        return ans;
    }

    private void findCombination(int ind,int target,int[] arr,List<List<Integer>> ans,List<Integer> ds){
        if(target == 0){
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i = ind ; i < arr.length ; i++){
            if(i > ind && arr[i] == arr[i- 1]) continue;
            if(arr[i] > target) break;
            ds.add(arr[i]);
            findCombination(i + 1, target - arr[i], arr , ans , ds);
            ds.remove(ds.size() - 1);
        }
    }
}


C++ Solution:
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> ds;
        sort(candidates.begin(),candidates.end());
        findCombination(0,target,candidates,ans,ds);
        return ans;
    }

    public:
    void findCombination(int ind,int target,vector<int>& arr,vector<vector<int>>& ans,vector<int>& ds){
        if(target == 0){
            ans.push_back(ds);
            return;
        }
        for(int i = ind; i < arr.size(); i++){
          if(i > ind && arr[i] == arr[i - 1]) continue;
          if(arr[i] > target) break;
          ds.push_back(arr[i]);
          findCombination(i + 1, target - arr[i], arr, ans, ds);
          ds.pop_back();
        }
       
    }
};
