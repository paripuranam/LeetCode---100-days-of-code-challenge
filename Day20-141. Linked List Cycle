Problem Link : https://leetcode.com/problems/linked-list-cycle/description/

Java Solution : 

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while(fast != null && fast.next != null)
        {
            fast = fast.next.next;
            slow = slow.next;
            
			
            if(fast == slow)
                return true;
        }
        return false;
    }
}


C++ Solution :

class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode *fast = head;
        ListNode *slow = head;
        while(fast != NULL && fast ->next != NULL)
        {
            fast = fast->next->next;
            slow = slow->next;
            
			
            if(fast == slow)
                return true;
        }
        return false;
    }
};
