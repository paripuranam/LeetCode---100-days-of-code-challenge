Problem Link : https://leetcode.com/problems/symmetric-tree/description/

Java Solution:

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return true;
        }
        return symmetric(root.left,root.right);
    }

        public boolean symmetric(TreeNode node1,TreeNode node2){
            if(node1==null && node2==null){
                return true;
            }
            if(node1==null || node2 == null ){
                return false;
            }
            return node1.val==node2.val && symmetric(node1.left,node2.right) && symmetric(node1.right,node2.left);
        }
    }

C++ Solution:

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root == nullptr) {
            return true;
        }
        return symmetric(root->left,root->right);
    }

        bool symmetric(TreeNode* node1,TreeNode* node2){
            if(node1==nullptr && node2==nullptr){
                return true;
            }
            if(node1==nullptr || node2 == nullptr ){
                return false;
            }
            return node1->val==node2->val && symmetric(node1->left,node2->right) && symmetric(node1->right,node2->left);
        }
};
